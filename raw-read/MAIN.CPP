#include <stdio.h>
#include <string.h>
#include <dos.h>

static void interrupt far (*original_int13)(...) = NULL;

static const unsigned char sector0_720kb[512] = {
	0xeb, 0x3c, 0x90, 0x4d, 0x53, 0x44, 0x4f, 0x53,
	0x35, 0x2e, 0x30, 0x00, 0x02, 0x02, 0x01, 0x00,
	0x02, 0x70, 0x00, 0xa0, 0x05, 0xf9, 0x03, 0x00,
	0x09, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xfa, 0x33,
	0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x7c, 0x16, 0x07,
	0xbb, 0x78, 0x00, 0x36, 0xc5, 0x37, 0x1e, 0x56,
	0x16, 0x53, 0xbf, 0x2b, 0x7c, 0xb9, 0x0b, 0x00,
	0xfc, 0xac, 0x26, 0x80, 0x3d, 0x00, 0x74, 0x03,
	0x26, 0x8a, 0x05, 0xaa, 0x8a, 0xc4, 0xe2, 0xf1,
	0x06, 0x1f, 0x89, 0x47, 0x02, 0xc7, 0x07, 0x2b,
	0x7c, 0xfb, 0xcd, 0x13, 0x72, 0x67, 0xa0, 0x10,
	0x7c, 0x98, 0xf7, 0x26, 0x16, 0x7c, 0x03, 0x06,
	0x1c, 0x7c, 0x03, 0x06, 0x0e, 0x7c, 0xa3, 0x3f,
	0x7c, 0xa3, 0x37, 0x7c, 0xb8, 0x20, 0x00, 0xf7,
	0x26, 0x11, 0x7c, 0x8b, 0x1e, 0x0b, 0x7c, 0x03,
	0xc3, 0x48, 0xf7, 0xf3, 0x01, 0x06, 0x37, 0x7c,
	0xbb, 0x00, 0x05, 0xa1, 0x3f, 0x7c, 0xe8, 0x96,
	0x00, 0xb8, 0x01, 0x02, 0xe8, 0xaa, 0x00, 0x72,
	0x19, 0x8b, 0xfb, 0xb9, 0x0b, 0x00, 0xbe, 0xcd,
	0x7d, 0xf3, 0xa6, 0x75, 0x0d, 0x8d, 0x7f, 0x20,
	0xbe, 0xd8, 0x7d, 0xb9, 0x0b, 0x00, 0xf3, 0xa6,
	0x74, 0x18, 0xbe, 0x6e, 0x7d, 0xe8, 0x61, 0x00,
	0x32, 0xe4, 0xcd, 0x16, 0x5e, 0x1f, 0x8f, 0x04,
	0x8f, 0x44, 0x02, 0xcd, 0x19, 0xbe, 0xb7, 0x7d,
	0xeb, 0xeb, 0xa1, 0x1c, 0x05, 0x33, 0xd2, 0xf7,
	0x36, 0x0b, 0x7c, 0xfe, 0xc0, 0xa2, 0x3c, 0x7c,
	0xa1, 0x37, 0x7c, 0xa3, 0x3d, 0x7c, 0xbb, 0x00,
	0x07, 0xa1, 0x37, 0x7c, 0xe8, 0x40, 0x00, 0xa1,
	0x18, 0x7c, 0x2a, 0x06, 0x3b, 0x7c, 0x40, 0x50,
	0xe8, 0x4e, 0x00, 0x58, 0x72, 0xcf, 0x28, 0x06,
	0x3c, 0x7c, 0x76, 0x0c, 0x01, 0x06, 0x37, 0x7c,
	0xf7, 0x26, 0x0b, 0x7c, 0x03, 0xd8, 0xeb, 0xd9,
	0x8a, 0x2e, 0x15, 0x7c, 0x8a, 0x16, 0xfd, 0x7d,
	0x8b, 0x1e, 0x3d, 0x7c, 0xea, 0x00, 0x00, 0x70,
	0x00, 0xac, 0x0a, 0xc0, 0x74, 0x22, 0xb4, 0x0e,
	0xbb, 0x07, 0x00, 0xcd, 0x10, 0xeb, 0xf2, 0x33,
	0xd2, 0xf7, 0x36, 0x18, 0x7c, 0xfe, 0xc2, 0x88,
	0x16, 0x3b, 0x7c, 0x33, 0xd2, 0xf7, 0x36, 0x1a,
	0x7c, 0x88, 0x16, 0x2a, 0x7c, 0xa3, 0x39, 0x7c,
	0xc3, 0xb4, 0x02, 0x8b, 0x16, 0x39, 0x7c, 0xb1,
	0x06, 0xd2, 0xe6, 0x0a, 0x36, 0x3b, 0x7c, 0x8b,
	0xca, 0x86, 0xe9, 0x8a, 0x16, 0xfd, 0x7d, 0x8a,
	0x36, 0x2a, 0x7c, 0xcd, 0x13, 0xc3, 0x0d, 0x0a,
	0x4e, 0x6f, 0x6e, 0x2d, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x20,
	0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x0d, 0x0a, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6b, 0x65,
	0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x0d, 0x0a, 0x00, 0x0d,
	0x0a, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x42, 0x6f,
	0x6f, 0x74, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x0d, 0x0a, 0x00, 0x49, 0x42, 0x4d,
	0x42, 0x49, 0x4f, 0x20, 0x20, 0x43, 0x4f, 0x4d,
	0x49, 0x42, 0x4d, 0x44, 0x4f, 0x53, 0x20, 0x20,
	0x43, 0x4f, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
};

static const unsigned char far *sector0_far = &sector0_720kb[0];

void interrupt far int13_handler(...)
{
	asm {
		cmp ax, 0x0201;
		jne _oldHandler;
		test dx, dx;
		jnz _oldHandler;
		cmp cx, 0x0001;
		jne _oldHandler;

		push di;
		push cx;
		push si;
		push ds;
		mov di, bx;
		mov cx, WORD PTR [sector0_far + 2];
		mov ds, cx;
		mov cx, WORD PTR [sector0_far];
		mov si, cx;
		mov cx, 0x200;
		rep movsb;
		pop ds;
		pop si;
		pop cx;
		pop di;

		jmp _done;
	}
_oldHandler:
	original_int13();
_done:
	return;
}

static void hook13(void)
{
        original_int13 = getvect(0x13);
        setvect(0x13, int13_handler);
}

static void restore13(void)
{
        setvect(0x13, original_int13);
}

int read_sector(int c, char h, char s, unsigned char far *buffer)
{
	char result = 0;
	int fail = 0;
	unsigned int cyl = ((c & 255) << 8) | ((c & 768) >> 2) | (s & 63);

	asm {
		push ax
		push bx
		push cx
		push dx
		push es
		mov al, 01h
		mov ah, 02h
		mov cx, [cyl]
		mov dh, [h]
		mov dl, 00h
		mov bx, WORD PTR [buffer + 2]
		mov es, bx
		mov bx, WORD PTR [buffer]
		int 13h
		jnb _done
		mov [fail], 01h
		mov [result], ah
	}
_done:
	asm {
		pop es
		pop dx
		pop cx
		pop bx
		pop ax
	}
	return fail ? -1 - result : 0;
}

int read_disk(FILE *fil, int high_density)
{
	unsigned char buffer[512];
	int tracks = high_density ? 18 : 9;
	int err = 0;

	printf("Reading CHS: 00 00 00");
	memset(buffer, 0xdf, sizeof(buffer));
	for (int c = 0; c < 80; c++) {
		for (int h = 0; h < 2; h++) {
			for (int s = 1; s <= tracks && !err; s++) {
				printf("\b\b\b\b\b\b\b\b%02d %02d %02d", c, h, s);
				hook13();
				err = read_sector(c, h, s, buffer);
				restore13();
				fwrite(buffer, sizeof(buffer), 1, fil);
			}
		}
	}
	printf("\n");
	return 0;
}

int main(int argc, const char **argv)
{
	if (argc < 2) {
		printf("Usage: %s <file> <high_density>\n", argv[0]);
		return -1;
	}
	FILE *fil = fopen(argv[1], "wb");
	if (!fil) {
		printf("Unable to create output file\n");
		return -1;
	}

	int high_density = argc > 2;

	int result = read_disk(fil, high_density);
	if (result == 0) {
		printf("Success\n");
	} else {
		printf("Failed with error %02x", -result - 1);
	}

	fclose(fil);
	return 0;
}
